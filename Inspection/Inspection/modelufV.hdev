<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('D:/cyw/实时图像7', ['files','follow_links','recursive'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<c></c>
<c></c>
<c>    </c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
<c></c>
<l>stop()</l>
<l>read_image (Image, 'C:/Users/ZZYY/Desktop/model.jpg')</l>
<l>decompose3(Image, Image1, Image2, Image3)</l>
<c></c>
<c as_id="ocr" as_name="OCR 01" as_grp="[2,1]" as_ord="3"></c>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,1]" as_ord="4">create_text_model_reader ('manual', [], TextModel)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="1">set_text_model_param (TextModel, 'polarity', 'light_on_dark')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="2">set_text_model_param (TextModel, 'is_dotprint', 'true')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="3">set_text_model_param (TextModel, 'char_width', 53)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="4">set_text_model_param (TextModel, 'char_height', 81)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="5">set_text_model_param (TextModel, 'stroke_width', 8)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="6">set_text_model_param (TextModel, 'return_punctuation', 'false')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="7">set_text_model_param (TextModel, 'return_separators', 'false')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="8">set_text_model_param (TextModel, 'uppercase_only', 'true')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="9">set_text_model_param (TextModel, 'fragment_size_min', 16)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="10">set_text_model_param (TextModel, 'eliminate_border_blobs', 'true')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="11">set_text_model_param (TextModel, 'base_line_tolerance', 0.2)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,2]" as_ord="12">set_text_model_param (TextModel, 'max_line_num', 1)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[2,3]" as_ord="3"></c>
<l as_id="ocr" as_name="OCR 01" as_grp="[2,3]" as_ord="4">read_ocr_class_mlp ('DotPrint_0-9.omc', OcrHandle)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[3,1]" as_ord="6"></c>
<c></c>
<c as_id="ocr" as_name="OCR 01" as_grp="[3,3]" as_ord="1"></c>
<l as_id="ocr" as_name="OCR 01" as_grp="[3,3]" as_ord="2">affine_trans_point_2d (Alignment, [0,0], [0,1], TmpCtrl_Rows, TmpCtrl_Columns)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[3,3]" as_ord="3">angle_lx (TmpCtrl_Rows[0], TmpCtrl_Columns[0], TmpCtrl_Rows[1], TmpCtrl_Columns[1], TmpCtrl_AlignmentOrientation)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,1]" as_ord="1">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,1]" as_ord="2">* OCR 01: Perform actual processing (once per ROI)</c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="1">* OCR 01: Generate regions of interest</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,2]" as_ord="1">gen_rectangle1 (ROI_OCR_01_0, 2325.01, 714.313, 2414.51, 864.604)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,2]" as_ord="2">affine_trans_region (ROI_OCR_01_0, ROI_OCR_01_0, Alignment, 'false')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,2]" as_ord="3">gen_rectangle1 (ROI_OCR_01_1, 2425.55, 712.084, 2519.34, 875.832)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,2]" as_ord="4">affine_trans_region (ROI_OCR_01_1, ROI_OCR_01_1, Alignment, 'false')</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="1">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="2">* OCR 01: Extract symbol regions (segmentation step)</c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="3">* OCR 01: Only consider first channel for color images</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="4">access_channel (Image, TmpObj_Mono, 1)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="5">reduce_domain (TmpObj_Mono, ROI_OCR_01_0, TmpObj_MonoReduced_OCR_01_0)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="6">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="7">* OCR 01: Orientation Correction (for consistent border and domain</c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="8">* OCR 01: handling, this is always applied, even with no rotation)</c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="9">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="10">* OCR 01: Base orientation of ROI</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="11">TmpCtrl_Orientation := 0</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="12">* OCR 01: Corrected for alignment</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="13">TmpCtrl_Orientation := TmpCtrl_Orientation + TmpCtrl_AlignmentOrientation</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="14">* OCR 01: Build rotation matrix</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="15">hom_mat2d_identity (TmpCtrl_MatrixIdentity)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="16">hom_mat2d_rotate (TmpCtrl_MatrixIdentity, -TmpCtrl_Orientation, 0, 0, TmpCtrl_MatrixRotation)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="17">* OCR 01: Apply transformation to image and domain</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="18">get_domain (TmpObj_MonoReduced_OCR_01_0, TmpObj_Domain)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="19">get_system ('clip_region', TmpCtrl_ClipRegion)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="20">set_system ('clip_region', 'false')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="21">dilation_circle (TmpObj_Domain, TmpObj_DomainExpanded, 40)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="22">affine_trans_region (TmpObj_DomainExpanded, TmpObj_DomainTransformedRaw, TmpCtrl_MatrixRotation, 'true')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="23">smallest_rectangle1 (TmpObj_DomainTransformedRaw, TmpCtrl_Row1, TmpCtrl_Col1, TmpCtrl_Row2, TmpCtrl_Col2)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="24">hom_mat2d_translate (TmpCtrl_MatrixIdentity, -TmpCtrl_Row1, -TmpCtrl_Col1, TmpCtrl_MatrixTranslation)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="25">hom_mat2d_compose (TmpCtrl_MatrixTranslation, TmpCtrl_MatrixRotation, TmpCtrl_MatrixComposite)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="26">affine_trans_region (TmpObj_Domain, TmpObj_DomainTransformed, TmpCtrl_MatrixComposite, 'true')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="27">affine_trans_image (TmpObj_MonoReduced_OCR_01_0, TmpObj_ImageTransformed, TmpCtrl_MatrixComposite, 'constant', 'true')</l>
<c></c>
<c></c>
<c></c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="28">dilation_circle (TmpObj_Domain, TmpObj_DomainExpanded, 40)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="29">expand_domain_gray (TmpObj_ImageTransformed, TmpObj_ImageTransformedExpanded, 40)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="30">reduce_domain (TmpObj_ImageTransformed, TmpObj_DomainTransformed, TmpObj_ImageTransformedReduced)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="31">crop_part (TmpObj_ImageTransformedReduced, TmpObj_MonoReduced_OCR_01_0, 0, 0, TmpCtrl_Col2-TmpCtrl_Col1+1, TmpCtrl_Row2-TmpCtrl_Row1+1)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="32">set_system ('clip_region', TmpCtrl_ClipRegion)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="33">find_text (TmpObj_MonoReduced_OCR_01_0, TextModel, TmpCtrl_ResultHandle_OCR_01_0)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="34">reduce_domain (TmpObj_Mono, ROI_OCR_01_1, TmpObj_MonoReduced_OCR_01_1)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="35">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="36">* OCR 01: Orientation Correction (for consistent border and domain</c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="37">* OCR 01: handling, this is always applied, even with no rotation)</c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="38">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="39">* OCR 01: Base orientation of ROI</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="40">TmpCtrl_Orientation := 0</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="41">* OCR 01: Corrected for alignment</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="42">TmpCtrl_Orientation := TmpCtrl_Orientation + TmpCtrl_AlignmentOrientation</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="43">* OCR 01: Build rotation matrix</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="44">hom_mat2d_identity (TmpCtrl_MatrixIdentity)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="45">hom_mat2d_rotate (TmpCtrl_MatrixIdentity, -TmpCtrl_Orientation, 0, 0, TmpCtrl_MatrixRotation)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="46">* OCR 01: Apply transformation to image and domain</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="47">get_domain (TmpObj_MonoReduced_OCR_01_1, TmpObj_Domain)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="48">get_system ('clip_region', TmpCtrl_ClipRegion)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="49">set_system ('clip_region', 'false')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="50">dilation_circle (TmpObj_Domain, TmpObj_DomainExpanded, 40)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="51">affine_trans_region (TmpObj_DomainExpanded, TmpObj_DomainTransformedRaw, TmpCtrl_MatrixRotation, 'true')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="52">smallest_rectangle1 (TmpObj_DomainTransformedRaw, TmpCtrl_Row1, TmpCtrl_Col1, TmpCtrl_Row2, TmpCtrl_Col2)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="53">hom_mat2d_translate (TmpCtrl_MatrixIdentity, -TmpCtrl_Row1, -TmpCtrl_Col1, TmpCtrl_MatrixTranslation)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="54">hom_mat2d_compose (TmpCtrl_MatrixTranslation, TmpCtrl_MatrixRotation, TmpCtrl_MatrixComposite)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="55">affine_trans_region (TmpObj_Domain, TmpObj_DomainTransformed, TmpCtrl_MatrixComposite, 'true')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="56">affine_trans_image (TmpObj_MonoReduced_OCR_01_1, TmpObj_ImageTransformed, TmpCtrl_MatrixComposite, 'constant', 'true')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="57">dilation_circle (TmpObj_Domain, TmpObj_DomainExpanded, 40)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="58">expand_domain_gray (TmpObj_ImageTransformed, TmpObj_ImageTransformedExpanded, 40)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="59">reduce_domain (TmpObj_ImageTransformed, TmpObj_DomainTransformed, TmpObj_ImageTransformedReduced)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="60">crop_part (TmpObj_ImageTransformedReduced, TmpObj_MonoReduced_OCR_01_1, 0, 0, TmpCtrl_Col2-TmpCtrl_Col1+1, TmpCtrl_Row2-TmpCtrl_Row1+1)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="61">set_system ('clip_region', TmpCtrl_ClipRegion)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,3]" as_ord="62">find_text (TmpObj_MonoReduced_OCR_01_1, TextModel, TmpCtrl_ResultHandle_OCR_01_1)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="1">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="2">* OCR 01: Read text (classification step)</c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="3">* OCR 01: Gray values for reading must be dark on bright</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="4">invert_image (TmpObj_MonoReduced_OCR_01_0, TmpObj_MonoInverted_OCR_01_0)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="5">get_text_object (Symbols_OCR_01_0, TmpCtrl_ResultHandle_OCR_01_0, 'all_lines')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="6">clear_text_result (TmpCtrl_ResultHandle_OCR_01_0)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="7">dev_display (TmpObj_MonoInverted_OCR_01_0)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="8">dev_set_draw ('fill')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="9">dev_set_colored (3)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="10">dev_display (Symbols_OCR_01_0)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="11">do_ocr_multi_class_mlp (Symbols_OCR_01_0, TmpObj_MonoInverted_OCR_01_0, OcrHandle, SymbolNames_OCR_01_0, Confidences_OCR_01_0)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="12">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="13">* OCR 01: Do something with the results</c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="14">* OCR 01: Gray values for reading must be dark on bright</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="15">invert_image (TmpObj_MonoReduced_OCR_01_1, TmpObj_MonoInverted_OCR_01_1)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="16">get_text_object (Symbols_OCR_01_1, TmpCtrl_ResultHandle_OCR_01_1, 'all_lines')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="17">clear_text_result (TmpCtrl_ResultHandle_OCR_01_1)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="18">dev_display (TmpObj_MonoInverted_OCR_01_1)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="19">dev_set_draw ('fill')</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="20">dev_set_colored (3)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="21">dev_display (Symbols_OCR_01_1)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="22">do_ocr_multi_class_mlp (Symbols_OCR_01_1, TmpObj_MonoInverted_OCR_01_1, OcrHandle, SymbolNames_OCR_01_1, Confidences_OCR_01_1)</l>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="23">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[4,4]" as_ord="24">* OCR 01: Do something with the results</c>
<c as_id="ocr" as_name="OCR 01" as_grp="[6,1]" as_ord="1">* OCR 01: </c>
<c as_id="ocr" as_name="OCR 01" as_grp="[6,1]" as_ord="2">* OCR 01: Cleanup (global)</c>
<l as_id="ocr" as_name="OCR 01" as_grp="[6,1]" as_ord="3">clear_text_model (TextModel)</l>
<l as_id="ocr" as_name="OCR 01" as_grp="[6,2]" as_ord="1">clear_ocr_class_mlp (OcrHandle)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c as_id="matching" as_name="Matching 03" as_grp="[0]" as_ord="1">* Matching 03: BEGIN of generated code for model initialization</c>
<l as_id="matching" as_name="Matching 03" as_grp="[0]" as_ord="2">set_system ('border_shape_models', 'false')</l>
<c as_id="matching" as_name="Matching 03" as_grp="[1,1,1]" as_ord="1">* Matching 03: Obtain the model image</c>
<c as_id="matching" as_name="Matching 03" as_grp="[1,1,1]" as_ord="2">* Matching 03: The image is assumed to be made available in the</c>
<c as_id="matching" as_name="Matching 03" as_grp="[1,1,1]" as_ord="3">* Matching 03: variable last displayed in the graphics window</c>
<l as_id="matching" as_name="Matching 03" as_grp="[1,1,1]" as_ord="4">copy_obj (Image, Image, 1, 1)</l>
<c as_id="matching" as_name="Matching 03" as_grp="[1,1,2]" as_ord="1">* Matching 03: build the ROI from basic regions</c>
<l as_id="matching" as_name="Matching 03" as_grp="[1,1,2]" as_ord="2">gen_rectangle1 (ModelRegion, 2420.9, 878.44, 2510.54, 945.858)</l>
<l as_id="matching" as_name="Matching 03" as_grp="[1,1,2]" as_ord="3">gen_region_runs (_TmpRegion, [2427,2428,2429,2430,2431,2432,2433,2434,2434,2435,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482], [927,925,923,921,921,920,920,919,930,919,930,919,918,918,918,917,917,916,916,916,915,915,915,914,914,913,913,913,912,912,912,911,911,910,910,910,909,909,909,908,908,907,907,907,907,907,907,907,906,906,906,906,906,906,907,907,908,908], [928,929,931,932,932,932,932,928,931,926,930,926,925,925,925,924,924,924,923,923,923,922,922,922,921,921,921,920,920,920,919,919,919,918,918,918,917,917,917,916,916,916,915,915,915,914,914,913,913,912,912,911,911,910,910,909,909,908])</l>
<l as_id="matching" as_name="Matching 03" as_grp="[1,1,2]" as_ord="4">difference (ModelRegion, _TmpRegion, ModelRegion)</l>
<l as_id="matching" as_name="Matching 03" as_grp="[1,1,2]" as_ord="5">gen_ellipse (_TmpRegion, 2433.11, 928.579, rad(-75.3452), 2.98581, 0.688427)</l>
<l as_id="matching" as_name="Matching 03" as_grp="[1,1,2]" as_ord="6">difference (ModelRegion, _TmpRegion, ModelRegion)</l>
<c as_id="matching" as_name="Matching 03" as_grp="[1,1,3]" as_ord="1">* Matching 03: reduce the model template</c>
<l as_id="matching" as_name="Matching 03" as_grp="[1,1,3]" as_ord="2">reduce_domain (Image, ModelRegion, TemplateImage)</l>
<c as_id="matching" as_name="Matching 03" as_grp="[1,1,4]" as_ord="1">* Matching 03: create the shape model</c>
<l as_id="matching" as_name="Matching 03" as_grp="[1,1,4]" as_ord="2">create_shape_model (TemplateImage, 5, rad(0), rad(360), rad(3.0532), ['none','no_pregeneration'], 'use_polarity', [25,45,4], 3, ModelId)</l>
<c as_id="matching" as_name="Matching 03" as_grp="[1,2]" as_ord="1">* Matching 03: get the model contour for transforming it later into the image</c>
<l as_id="matching" as_name="Matching 03" as_grp="[1,2]" as_ord="2">get_shape_model_contours (ModelContours, ModelId, 1)</l>
<l>write_shape_model(ModelId, 'C:/Users/ZZYY/Desktop/V_model.shm')</l>
<c></c>
<c></c>
<c as_id="matching" as_name="Matching 03" as_grp="[2]" as_ord="1">* Matching 03: END of generated code for model initialization</c>
<c as_id="matching" as_name="Matching 03" as_grp="[3,1]" as_ord="1">* Matching 03: BEGIN of generated code for model application</c>
<c as_id="matching" as_name="Matching 03" as_grp="[4]" as_ord="1">* Matching 03: the following operations are usually moved into</c>
<c as_id="matching" as_name="Matching 03" as_grp="[4]" as_ord="2">* Matching 03: that loop where the aquired images are processed</c>
<c as_id="matching" as_name="Matching 03" as_grp="[6]" as_ord="1">* Matching 03: Find the model</c>
<l as_id="matching" as_name="Matching 03" as_grp="[6]" as_ord="2">find_shape_model (Image, ModelId, rad(0), rad(360), 0.5, 27, 0.5, 'least_squares', [5,1], 0.75, ModelRow, ModelColumn, ModelAngle, ModelScore)</l>
<c as_id="matching" as_name="Matching 03" as_grp="[7,1]" as_ord="1">* Matching 03: transform the model contours into the detected positions</c>
<l as_id="matching" as_name="Matching 03" as_grp="[7,2]" as_ord="1">for MatchingObjIdx := 0 to |ModelScore| - 1 by 1</l>
<l as_id="matching" as_name="Matching 03" as_grp="[7,3]" as_ord="1">    hom_mat2d_identity (HomMat)</l>
<l as_id="matching" as_name="Matching 03" as_grp="[7,5]" as_ord="1">    hom_mat2d_rotate (HomMat, ModelAngle[MatchingObjIdx], 0, 0, HomMat)</l>
<l as_id="matching" as_name="Matching 03" as_grp="[7,5]" as_ord="2">    hom_mat2d_translate (HomMat, ModelRow[MatchingObjIdx], ModelColumn[MatchingObjIdx], HomMat)</l>
<l as_id="matching" as_name="Matching 03" as_grp="[7,5]" as_ord="3">    affine_trans_contour_xld (ModelContours, TransContours, HomMat)</l>
<l as_id="matching" as_name="Matching 03" as_grp="[7,6]" as_ord="1">    dev_display (TransContours)</l>
<l as_id="matching" as_name="Matching 03" as_grp="[7,7]" as_ord="1">endfor</l>
<c as_id="matching" as_name="Matching 03" as_grp="[11]" as_ord="1">* Matching 03: Clear model when done</c>
<l as_id="matching" as_name="Matching 03" as_grp="[11]" as_ord="2">clear_shape_model (ModelId)</l>
<c as_id="matching" as_name="Matching 03" as_grp="[12]" as_ord="1">* Matching 03: END of generated code for model application</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c as_id="matching" as_name="Matching 02" as_grp="[1,1,1]" as_ord="1">* Matching 02: Obtain the model image</c>
<c as_id="matching" as_name="Matching 02" as_grp="[1,1,1]" as_ord="2">* Matching 02: The image is assumed to be made available in the</c>
<c as_id="matching" as_name="Matching 02" as_grp="[1,1,1]" as_ord="3">* Matching 02: variable last displayed in the graphics window</c>
<l as_id="matching" as_name="Matching 02" as_grp="[1,1,1]" as_ord="4">copy_obj (Image1, Image, 1, 1)</l>
<c as_id="matching" as_name="Matching 02" as_grp="[1,1,2]" as_ord="1">* Matching 02: build the ROI from basic regions</c>
<l as_id="matching" as_name="Matching 02" as_grp="[1,1,2]" as_ord="2">gen_rectangle1 (ModelRegion, 2311.47, 867.212, 2421, 956.306)</l>
<c as_id="matching" as_name="Matching 02" as_grp="[1,1,3]" as_ord="1">* Matching 02: reduce the model template</c>
<l as_id="matching" as_name="Matching 02" as_grp="[1,1,3]" as_ord="2">reduce_domain (Image, ModelRegion, TemplateImage)</l>
<c as_id="matching" as_name="Matching 02" as_grp="[1,1,4]" as_ord="1">* Matching 02: create the deformable model</c>
<l as_id="matching" as_name="Matching 02" as_grp="[1,1,4]" as_ord="2">create_planar_uncalib_deformable_model (TemplateImage, 4, rad(0), rad(360), rad(1), 1, 1, 0.02, 1, 1, 0.02, 'none', 'use_polarity', [22,38], 10, [], [], ModelId)</l>
<c as_id="matching" as_name="Matching 02" as_grp="[1,2]" as_ord="1">* Matching 02: get the model contour for transforming it later into the image</c>
<l as_id="matching" as_name="Matching 02" as_grp="[1,2]" as_ord="2">get_deformable_model_contours (ModelContours, ModelId, 1)</l>
<l>write_deformable_model(ModelId, 'C:/Users/ZZYY/Desktop/uF_model.dfm')</l>
<c></c>
<c></c>
<c as_id="matching" as_name="Matching 02" as_grp="[2]" as_ord="1">* Matching 02: END of generated code for model initialization</c>
<c as_id="matching" as_name="Matching 02" as_grp="[3,1]" as_ord="1">* Matching 02: BEGIN of generated code for model application</c>
<c as_id="matching" as_name="Matching 02" as_grp="[4]" as_ord="1">* Matching 02: The following operators are usually moved into</c>
<c as_id="matching" as_name="Matching 02" as_grp="[4]" as_ord="2">* Matching 02: the loop where the aquired images are processed</c>
<c as_id="matching" as_name="Matching 02" as_grp="[6]" as_ord="1">* Matching 02: Find the model</c>
<l as_id="matching" as_name="Matching 02" as_grp="[6]" as_ord="2">find_planar_uncalib_deformable_model (Image, ModelId, rad(0), rad(360), 1, 1, 1, 1, 0.5, 3, 0.5, 4, 0.75, ['subpixel'], ['least_squares_very_high'], ResultHomMat, ModelScore)</l>
<c as_id="matching" as_name="Matching 02" as_grp="[7,1]" as_ord="1">* Matching 02: transform the model contours into the detected positions</c>
<c></c>
<l as_id="matching" as_name="Matching 02" as_grp="[7,2]" as_ord="1">for MatchingObjIdx := 0 to |ModelScore| - 1 by 1</l>
<l as_id="matching" as_name="Matching 02" as_grp="[7,3]" as_ord="1">    _TempHomMat2D := ResultHomMat[MatchingObjIdx*9:MatchingObjIdx*9+8]</l>
<l as_id="matching" as_name="Matching 02" as_grp="[7,4]" as_ord="1">    projective_trans_contour_xld (ModelContours, TransContours, _TempHomMat2D)</l>
<l as_id="matching" as_name="Matching 02" as_grp="[7,6]" as_ord="1">    dev_display (TransContours)</l>
<l as_id="matching" as_name="Matching 02" as_grp="[7,7]" as_ord="1">endfor</l>
<c as_id="matching" as_name="Matching 02" as_grp="[11]" as_ord="1">* Matching 02: Clear model when done</c>
<l as_id="matching" as_name="Matching 02" as_grp="[11]" as_ord="2">clear_deformable_model (ModelId)</l>
<c as_id="matching" as_name="Matching 02" as_grp="[12]" as_ord="1">* Matching 02: END of generated code for model application</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
